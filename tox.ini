# https://tox.wiki/en/latest/config.html#tox-global-settings

# https://pytest-cov.readthedocs.io/en/latest/config.html
# https://docs.pytest.org/en/6.2.x/reference.html?highlight=command%20line%20options#command-line-flags

# https://tox.wiki/en/latest/config.html#tox-environments

# Configuration of tox command.
[tox]
envlist =
    googletest
    cmake
    mypy
    check
    py{37,38,39,310}
minversion = 3.20
skip_missing_interpreters = true


# Storage space for reusable configuration variables.
[develop_common]
basepython = python3.8
common_env_vars =
    # https_proxy = http://
    # http_proxy = http://
    PYTHONPATH = {toxinidir}/tests
    PYTHONUNBUFFERED = yes


# Shared environment configuration.
[testenv]
setenv =
    {[develop_common]common_env_vars}
passenv = *
recreate = false
skip_install = false
usedevelop = true


# Run pytest test suite and generate coverage report.
[testenv:py{37,38,39,310}]
setenv =
    {[develop_common]common_env_vars}
deps =
    -r requirements-test.txt
    -r requirements.txt
commands =
    coverage erase
    pytest --cov --cov-report=term-missing:skip-covered \
        --flake8 -v tests {posargs}
    coverage html --dir="{toxinidir}/coverage/{envname}_htmlcov"


# Perform mypy static type check on codebase generate report from results.
[testenv:mypy]
basepython = {[develop_common]basepython}
setenv =
    {[develop_common]common_env_vars}
deps =
    -r requirements-test.txt
    -r requirements.txt
commands =
    mypy --html-report "{toxinidir}/typechecking/{envname}_report" source/optmath


# Build distribution packages for all supported python versions.
[testenv:build-all]
recreate = true
skip_install = true
ignore_errors = true
deps =
    tox>=3.20
commands =
    tox -e cmake -- --clean
    tox -e build-py37 -- --skip
    tox -e build-py38 -- --skip
    tox -e build-py39 -- --skip
    tox -e build-py310 -- --skip


# Build distribution package for single python version x.y
[testenv:build-py{37,38,39,310}]
recreate = true
skip_install = true
deps =
    -r requirements-dev.txt
commands =
    tox -e cmake -- {posargs}
    python setup.py bdist_wheel
    # python setup.py sdist --formats=gztar,zip bdist_wheel --universal
    # setup.py bdist_wheel --exclude-c --python-tag py3.9


# Create virtual envirionment with development utilities.
[testenv:devenv]
setenv =
    {[develop_common]common_env_vars}
basepython = {[develop_common]basepython}
recreate = true
skip_install = true
deps =
    -r requirements-dev.txt
commands =
    {envpython} -m tox -e cmake -- --no-clean --no-skip --debug
    {envpython} -m pip install --editable .
    pre-commit install
    pre-commit install-hooks


# Compile C++ extension code into static library
[testenv:cmake]
basepython = {[develop_common]basepython}
recreate = false
skip_install = true
deps =
    -r requirements-dev.txt
commands =
    {envpython} -m scripts.build_cmake {posargs}


# Build documentation web page with MKDocs.
[testenv:docs]
basepython = {[develop_common]basepython}
recreate = true
skip_install = true
ignore_errors = true
deps =
    -r requirements-dev.txt
commands =
    mkdocs build


# Perform code quality check over both Python and C++ code.
[testenv:check]
basepython = {[develop_common]basepython}
recreate = false
skip_install = true
ignore_errors = true
ignore_outcome = true
deps =
    -r requirements-dev.txt
commands =
    isort .
    black .
    docformatter -r source/ scripts/ --in-place --docstring-length 75 75 -e .tox,.eggs,build,dist,typings,.temp,docs
    flake8 .
    {envpython} -m scripts.clang_format_all


# Build C++ code in debug mode and run its test suite
[testenv:googletest]
basepython = {[develop_common]basepython}
recreate = false
skip_install = true
deps =
    -r requirements-dev.txt
commands =
    {envpython} -m tox -e cmake -- --clean --no-skip --debug
    {envpython} -m scripts.run_cpp_tests {posargs}
